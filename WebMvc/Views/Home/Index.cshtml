@{
    ViewData["Title"] = "Home Page";
}

<div class="text-center">
    <h1 class="display-4">Real-Time Sync</h1>
    Your input: 
    <input type="text" id="input" />
    <div id="output"></div>
    <h3>Other clients input</h3>
    
    <div class="row">
        <div class="col-md-3"></div>
        <div class="col-md-6">
            <table id="clients" class="table">
                <tr>
                    <th>Clients</th>
                    <th>Input</th>
                </tr>
            </table>
        </div>
        <div class="col-md-3"></div>
    </div>
    <script src="~/lib/jquery/dist/jquery.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.25/signalr.min.js"></script>
    <script>
        $(function () {
            var connectedClients = [];
            var connection = new signalR.HubConnectionBuilder().withUrl("http://localhost:5123/message-hub").build();

            connection.start().then(function () {
                console.log("Connected to hub");
            }).catch(function (err) {
                console.error(err.toString());
            });
            connection.on("Message", function (message) {
                document.getElementById("output").innerHTML = "Last input: " + message;
            });

            connection.on("ClientList", function (clients) {
                clients = clients.filter(function (e) { return e !== connection.connectionId }).map(str => ({ name: str, input: '' }));
                
                const clientsTable = document.getElementById("clients");

                for (let i = 0; i < clients.length; i++) {
                    if (!connectedClients.some(x => x.name == clients[i].name)) {
                        connectedClients.push(clients[i]);
                        addNewClient(connection, clients[i].name, clientsTable);
                    }
                }

                for (let i = connectedClients.length - 1; i >= 0; i--) {
                    if (!clients.some(x => x.name === connectedClients[i].name)) {
                        removeClient(connection, connectedClients[i].name, clientsTable);
                        connectedClients.splice(i, 1);
                    }
                }
            });
            document.getElementById("input").addEventListener("input", function (event) {
                connection.invoke("SendMessage", event.target.value).catch(function (err) {
                    return console.error(err.toString());
                });
                connection.invoke("SendMessageTo", event.target.value, connection.connectionId).catch(function (err) {
                    return console.error(err.toString());
                });
            });
        });

        function removeClient(connection, clientName, table) {
            connection.off(clientName);
            $(`#${clientName}`).parent().remove();
        }

        function addNewClient(connection, clientName, table) {
            const line = table.insertRow();
            const celName = line.insertCell();
            const celInput = line.insertCell();

            celName.textContent = clientName;
            celInput.id = clientName;

            onMessage(connection, clientName);
        }

        function onMessage(connection, id) {
            connection.on(id, function (message) {
                document.getElementById(id).innerHTML = message;
            });
        }
    </script>
</div>
